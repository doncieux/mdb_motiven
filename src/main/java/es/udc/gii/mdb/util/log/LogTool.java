/*
 * Copyright (C) 2010 Grupo Integrado de Ingenier√≠a
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package es.udc.gii.mdb.util.log;

import es.udc.gii.mdb.core.MDBCore;
import es.udc.gii.mdb.knowledge.declarative.model.Model;
import es.udc.gii.mdb.util.config.Configurable;
import es.udc.gii.mdb.util.xml.ConfigUtilXML;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.configuration.Configuration;

/**
 *
 * Abstract class that supports the two different types of logs generated by
 * this architecture.
 *
 * @author GII
 */
public abstract class LogTool implements Observer, Configurable {

    private PrintStream p;
    private File out;
    private String modelName;
    private String fullName;
    private int iterations;

    private boolean registered;
    private int iterationsToSave;
    private String path2file;

    /**
     *
     * Configuration of the log from the parameters specified in the
     * configuration file.
     *
     * @param conf Object containing the configuration details relating to logs.
     */
    @Override
    public void configure(Configuration conf) {
        try {
            path2file = conf.getString(ConfigUtilXML.LOG_FOLDER_TAG);

            if (!path2file.startsWith(File.separator)) {
                path2file = System.getProperty("user.dir") + File.separator + path2file;
            }

            boolean timestamp = conf.containsKey("TimeStamp");

            File path = new File(path2file);
            path.mkdirs();
            fullName = modelName + "-" + getClass().getSimpleName() + getLogID(timestamp, path, modelName + "-" + getClass().getSimpleName());
            out = new File(path, fullName + ".txt");
            p = new PrintStream(out, "UTF-8");
            iterations = conf.getInt(ConfigUtilXML.LOG_ITERATIONS_TAG);
            iterationsToSave = conf.getInt("iterationsToSave", 500);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(LogTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LogTool.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    protected String getLogID(boolean timestamp, File path2file, final String logName) {
        String logID = "";

        if (timestamp) {
            logID = Long.toString(Calendar.getInstance().getTimeInMillis());
        } else {

            //Listamos todos los ficheros que sean del mismo tipo que el actual:
            File[] files = path2file.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File folder, String filename) {
                    return filename.contains(logName);
                }
            });

            int number = files.length + 1;

            logID = "_";
            if (number < 1000) {
                logID += "0";
            }
            if (number < 100) {
                logID += "0";
            }
            if (number < 10) {
                logID +="0";
            }
            logID += Integer.toString(number);
        }

        return logID;
    }

    /**
     *
     * Set the name of the model, that will be used to make up the file name.
     *
     * @param name Name of the model to be used as part of the file name.
     */
    public void setName(String name) {
        this.modelName = name;
    }

    /**
     *
     * There are two types of logs: the ones that observe the models in the main
     * loop and the ones that observe the evolutionary processes. As we can
     * reach both elements through the models, here we define an abstract method
     * to specify in each case the object to be observed.
     *
     * @param m {@link Model} through which we will establish the observable.
     */
    public abstract void setObservable(Observable m);

    public abstract Observable getObservable();

    /**
     *
     * Get the name of the observable which this log is associated to.
     *
     * @return Name of the observable.
     */
    protected String getName() {
        return modelName;
    }

    /**
     *
     * Close the stream. This method should be called when no more lines will be
     * written into the log file.
     *
     */
    public void close() {
        p.close();
    }

    /**
     *
     * Auxiliary method, used to simplify the task of writing a line into the
     * log file.
     *
     * @param line Line to be written.
     */
    protected void printLine(String line) {
        p.println(line);
    }

    /**
     *
     * As a log is part of a realization of the Observer design pattern, it will
     * have the update method to execute when a notification is received. As we
     * can specify how often a line is written (number of iterations), will
     * define this as a template method pattern. Here we will test if the
     * condition is satisfied, and if so, call the {@link LogTool#doUpdate}
     * method.
     *
     * @param o
     * @param arg
     */
    @Override
    public void update(Observable o, Object arg) {
        int iter = MDBCore.getInstance().getIterations();

        if (iter % iterations == 0) {
            doUpdate(o, arg);
        }
    }

    /**
     *
     * Template method pattern realization. It remains abstract and each
     * concrete log will have to implement it.
     *
     * @param o
     * @param arg
     */
    protected abstract void doUpdate(Observable o, Object arg);

    public boolean isRegistered() {
        return registered;
    }

    public int getIterationsToSave() {
        return iterationsToSave;
    }

    public void setIterationsToSave(int iterationsToSave) {
        this.iterationsToSave = iterationsToSave;
    }

    public String getPath2file() {
        return path2file;
    }

    public String getModelName() {
        return modelName;
    }

    public File getOut() {
        return out;
    }

    public PrintStream getP() {
        return p;
    }

    public void setOut(File out) {
        this.out = out;
    }

    public void setP(PrintStream p) {
        this.p = p;
    }

    public void newFile() {
        getP().close();
        try {

            boolean timestamp = false;

            File path = new File(getPath2file());
            path.mkdirs();
            String fullName = getModelName() + "-" + getClass().getSimpleName() + getLogID(timestamp, path, getModelName() + "-" + getClass().getSimpleName());
            setOut(new File(path, fullName + ".txt"));
            setP(new PrintStream(getOut(), "UTF-8"));
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(LogTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LogTool.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
